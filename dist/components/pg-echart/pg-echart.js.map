{"version":3,"sources":["components/pg-echart/pg-echart.js"],"names":["DEBOUNC_TIME","ChartElement","Element","element","_attached","_debounceResize","debounce","_resize","attached","_createOrUpdate","dataChanged","detached","_chart","undefined","data","init","find","on","_clickChart","params","_datazoom","setOption","options","chart","resize","dispatchEvent","CustomEvent","detail","bubbles","chartElement","xAxis","getOption","startValue","endValue","length","rangeStart","rangeEnd","startIndex","endIndex","isEqual","_datazoomParams","getChart","dispatchDatazoom","dataZoom","assignIn"],"mappings":"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","file":"pg-echart.js","sourceRoot":"/src","sourcesContent":["import { inject, customElement, bindable } from 'aurelia-framework'\nimport _ from \"lodash\";\nimport $ from 'jquery';\nimport echarts from \"echarts\";\nimport ResizeSensor from 'css-element-queries/src/ResizeSensor';\nconst DEBOUNC_TIME = 300;\n@customElement('echart')\n@inject(Element)\nexport class ChartElement {\n    @bindable data;\n    @bindable loading;\n    @bindable options = {};\n\n    _datazoomParams;\n    _chart;\n    _attached = false;\n\n    _debounceResize = _.debounce(this._resize, DEBOUNC_TIME);\n\n    constructor(element) {\n        this.element = element;\n    }\n\n    attached() {\n        // workaround https://github.com/aurelia/templating/issues/400\n        this._createOrUpdate();\n        this._attached = true;\n    }\n\n    dataChanged() {\n        if (this._attached) {\n            this._createOrUpdate();\n        }\n    }\n\n    detached() {\n        if (this._chart) {\n            this._chart = undefined;\n        }\n        this._attached = false;\n    }\n\n    _createOrUpdate() {\n        if (this.data) {\n            if (!this._chart) {\n                this._chart = echarts.init($(this.element).find('.pg-echart')[0]);\n                new ResizeSensor(this.element, () => {\n                    this._debounceResize(this._chart)\n                });\n                this._chart.on('click', params => {\n                    this._clickChart(params);\n                });\n                this._chart.on('datazoom', params => {\n                    this._datazoom()\n                });\n                // this._chart.on('brushselected', params => {\n                //    console.log(params)\n                // });\n            }\n            this._chart.setOption(this.options, true);\n            // $(window).resize(() => { this._chart.resize(); });\n            // detect dom resize, see: https://github.com/marcj/css-element-queries\n            // new ResizeSensor(this.element, () => {\n            //     console.log(this,'resize')\n            //     this._chart && this._chart.resize();\n            // });\n\n        } else {\n            if (this._chart) {\n                //this._chart.destroy();\n                this._chart = undefined;\n            }\n        }\n    }\n\n    _resize(chart) {\n        if (chart) {\n            chart.resize();\n        }\n    }\n    _clickChart(params) {\n        this.element.dispatchEvent(new CustomEvent('chartclick', {\n            detail: params, bubbles: true\n        })\n        );\n    }\n    _datazoom(chartElement) {\n        const xAxis = this._chart.getOption().xAxis[0];\n        let startValue, endValue;\n        if (xAxis && xAxis.data && xAxis.data.length) {\n            startValue = xAxis.data[xAxis.rangeStart || 0];\n            endValue = xAxis.data[xAxis.rangeEnd || xAxis.data.length - 1];\n        }\n\n        const params = { \n            startValue: startValue, \n            endValue: endValue,\n            startIndex:xAxis.rangeStart,\n            endIndex:xAxis.rangeEnd \n        };\n        if (!_.isEqual(params, this.element._datazoomParams)) {\n            this.element._datazoomParams = params;//cache the last datazoom params\n            this.element.dispatchEvent(new CustomEvent('datazoom', {\n                detail: params, bubbles: true\n            })\n            );\n        }\n\n    }\n    getChart(){\n        return this._chart;\n    }\n    dispatchDatazoom(params) {\n        if (this._chart) {\n            // this._chart.dispatchAction(_.assignIn({ type: 'dataZoom' }), params);\n            this.options.dataZoom[0] = _.assignIn(this.options.dataZoom[0],params)\n            this._createOrUpdate();\n        }\n    }\n}"]}