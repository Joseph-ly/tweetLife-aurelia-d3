{"version":3,"sources":["tweetlife/tl-linechart/tl-linechart.js"],"names":["TlLineChart","EventAggregator","loading","options","title","text","tooltip","trigger","formatter","params","name","data","axisPointer","animation","xAxis","type","boundaryGap","splitLine","show","axisLine","lineStyle","color","width","axisLabel","textStyle","fontSize","yAxis","series","smooth","eventAggregator","subscribe","dataCol","lineData","spreadTime","newData","yIdx","gapNum","totalCounts","length","timeStart","format","timeEnd","push","incrs","Math","floor","i","dataIdx","parseInt","random","timeStamp","timeValue","attached","timeConverter","time","unit","result","number","finalUnit","ceil"],"mappings":"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","file":"tl-linechart.js","sourceRoot":"/src","sourcesContent":["import { inject, customElement, bindable } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport moment from 'moment';\nimport _ from 'lodash';\n\n@customElement('tl-linechart')\n@inject(EventAggregator)\nexport class TlLineChart {\n    @bindable defaultView = true;\n    loading = false;\n    lineData;\n\n    constructor(EventAggregator) {\n        // linechart config options\n        this.options = {\n            title: {\n                text: ''    \n            },\n            tooltip: {\n                trigger: 'axis',\n                formatter: function (params) {\n                    params = params[0];\n                    return params.name + ' : ' + params.data;\n                },\n                axisPointer: {\n                    animation: false\n                }\n            },\n            xAxis: {\n                type: 'category',\n                boundaryGap: false,\n                splitLine: {\n                    show: false\n                },\n                axisLine: {\n                    lineStyle: {\n                        color: '#cdcdcd',\n                        width: 2\n                    }\n                },\n                axisLabel: {\n                    textStyle: {\n                        color: '#000',\n                        fontSize: 10\n                    }\n                }\n            },\n            yAxis: {\n                type: 'value',\n                axisLine: {\n                    lineStyle: {\n                        color: '#cdcdcd',\n                        width: 2\n                    }\n                },\n                axisLabel: {\n                    textStyle: {\n                        color: '#000',\n                        fontSize: 10\n                    }\n                },\n                // boundaryGap: [0, '20%'],\n                // min: 0,\n                // max: 100,\n                splitLine: {\n                    show: false\n                }\n            },\n            series: [{\n                type: 'line',\n                smooth: true,\n                // sampling: 'average',\n                // showSymbol: false,\n                // hoverAnimation: false,\n                data: []\n            }]\n        };\n\n        this.eventAggregator = EventAggregator;\n        this.eventAggregator.subscribe('triggerFetch', () => {\n            this.loading = true;\n        })\n        this.eventAggregator.subscribe('tweetlifeData', (dataCol) => {\n            this.loading = false;\n            this.lineData = dataCol.spreadTime;\n\n            // set xAxis count\n            let newData = [], yIdx = [], gapNum = 7, totalCounts = this.lineData.length;\n            let timeStart = moment(this.lineData[1]).format('ddd, h:mm A');\n            let timeEnd = moment(this.lineData[this.lineData.length - 1]).format('ddd, h:mm A');\n            newData.push(timeStart)\n            yIdx.push(1)\n\n            let incrs = Math.floor(totalCounts/gapNum);\n            for(let i = 0; i < gapNum-1; i++) {\n                let dataIdx = +incrs * i + parseInt(Math.random() * incrs);\n                dataIdx = (dataIdx >= (totalCounts-1)) ? (dataIdx - 10) : dataIdx;\n                let timeStamp = this.lineData[dataIdx];\n                let timeValue = moment(timeStamp).format('ddd, h:mm A')\n                newData.push(timeValue)\n                yIdx.push(dataIdx)\n            }\n            \n            newData.push(timeEnd)\n            yIdx.push(totalCounts-1)\n            \n            this.options.series[0].data = yIdx;\n            this.options.xAxis.data = newData\n        })\n        this.eventAggregator.subscribe('noRootTweetId', () => {\n            this.loading = false;\n        })\n        \n    }\n\n    attached() {}\n\n    timeConverter(time, unit) {\n        let result = '', number = '', finalUnit = '';\n        switch(unit) {\n            case 'min': \n                if(time > 60) {\n                    time = time / 60; // to hour\n                    this.timeConverter(time, 'hr')\n                }\n                else {\n                    result = Math.ceil(time) + ' min';\n                    number = Math.ceil(time);\n                    finalUnit = 'min';\n                    break;\n                }\n            case 'hr': \n                if(time > 24) {\n                    time = time / 24; // to day\n                    this.timeConverter(time, 'day')\n                }\n                else {\n                    result = Math.ceil(time) + ' hr';\n                    number = Math.ceil(time);\n                    finalUnit = 'hr';\n                    break;\n                }\n            case 'day': \n                if(time > 7) {\n                    time = time / 7; // to week\n                    this.timeConverter(time, 'wk')\n                }\n                else {\n                    result = Math.ceil(time) + ' day';\n                    number = Math.ceil(time);\n                    finalUnit = 'day';\n                    break;\n                }\n            case 'wk': \n                if(time > 5) {\n                    time = time / 5; // to month\n                    this.timeConverter(time, 'month')\n                }\n                else {\n                    result = Math.ceil(time) + ' wk';\n                    number = Math.ceil(time);\n                    finalUnit = 'wk';\n                    break;\n                }\n            case 'month': \n                if(time > 12) {\n                    time = time / 60; // to year\n                    this.timeConverter(time, 'year')\n                }\n                else {\n                    result = Math.ceil(time) + ' month';\n                    number = Math.ceil(time);\n                    finalUnit = 'month';\n                    break;\n                }\n            case 'year': \n                result = Math.ceil(time) + ' year';\n                    number = Math.ceil(time);\n                    finalUnit = 'year';\n                break;\n            \n        }\n\n        return { result: result, number: number, unit: finalUnit };\n    }\n\n}\n"]}