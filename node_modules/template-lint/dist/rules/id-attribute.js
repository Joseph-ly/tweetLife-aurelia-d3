"use strict";
const rule_1 = require("../rule");
const issue_1 = require("../issue");
class IdAttributeRule extends rule_1.Rule {
    constructor(opts) {
        super();
        this.allowEmptyId = false;
        this.allowDuplicateId = false;
        this.allowIllegalChars = false;
        this.ignoreAny = null;
        if (opts) {
            this.allowEmptyId = opts.allowEmptyId || this.allowEmptyId;
            this.allowDuplicateId = opts.allowDuplicateId || this.allowDuplicateId;
            this.allowIllegalChars = opts.allowIllegalChars || this.allowIllegalChars;
            this.ignoreAny = opts.ignoreAny || this.ignoreAny;
        }
    }
    init(parser) {
        this.ids = [];
        parser.on('startTag', (name, attrs, selfClosing, loc) => {
            let idAttr = attrs.find(x => x.name == "id");
            if (!idAttr)
                return;
            var id = idAttr.value;
            var illegals = id.match(/^[^a-z]+|[^\w:.-]+/) != null;
            if (!this.allowEmptyId && id === "") {
                let issue = new issue_1.Issue({
                    message: "id cannot be empty",
                    severity: issue_1.IssueSeverity.Warning,
                    line: loc.line,
                    column: loc.col,
                    start: loc.startOffset,
                    end: loc.endOffset
                });
                this.reportIssue(issue);
            }
            else if (this.ignoreAny != null && id.match(this.ignoreAny) != null) {
                return;
            }
            else if (!this.allowIllegalChars && illegals) {
                let issue = new issue_1.Issue({
                    message: `illegal characters detected in id: ${id}`,
                    severity: issue_1.IssueSeverity.Error,
                    line: loc.line,
                    column: loc.col,
                    start: loc.startOffset,
                    end: loc.endOffset
                });
                this.reportIssue(issue);
            }
            else if (!this.allowDuplicateId && this.ids.indexOf(id) != -1) {
                let issue = new issue_1.Issue({
                    message: `duplicated id: ${id}`,
                    severity: issue_1.IssueSeverity.Error,
                    line: loc.line,
                    column: loc.col,
                    start: loc.startOffset,
                    end: loc.endOffset
                });
                this.reportIssue(issue);
            }
            this.ids.push(id);
        });
    }
}
exports.IdAttributeRule = IdAttributeRule;

//# sourceMappingURL=id-attribute.js.map
