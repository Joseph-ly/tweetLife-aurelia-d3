"use strict";
class ASTNode {
    constructor(opt) {
        this.context = null;
        this.locals = [];
        this.parent = null;
        this.children = [];
        this.location = null;
        if (opt) {
            this.context = opt.context;
            this.locals = opt.locals || [];
            this.parent = opt.parent;
            this.children = opt.children || [];
            this.location = opt.location;
        }
    }
    addChild(node) {
        if (this.children.indexOf(node) == -1) {
            this.children.push(node);
            node.parent = this;
        }
    }
    static inheritLocals(node, ancestor) {
        let locals = [];
        if (ancestor) {
            while (node != null && ancestor >= 0) {
                node = node.parent;
                ancestor -= 1;
            }
        }
        while (node != null) {
            node.locals.forEach(x => {
                let index = locals.findIndex(y => y.name == x.name);
                if (index == -1)
                    locals.push(x);
            });
            node = node.parent;
        }
        return locals;
    }
    static inheritContext(node, ancestor) {
        if (ancestor) {
            while (node != null && ancestor >= 0) {
                node = node.parent;
                ancestor -= 1;
            }
        }
        while (node != null) {
            if (node.context != null)
                return node.context;
            node = node.parent;
        }
        return null;
    }
}
exports.ASTNode = ASTNode;

//# sourceMappingURL=ast-node.js.map
