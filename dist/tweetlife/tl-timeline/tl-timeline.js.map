{"version":3,"sources":["tweetlife/tl-timeline/tl-timeline.js"],"names":["TlTimeLine","Element","element","loading","_attached","_brushing","_brushIndex","_datazoomParams","defaultView","options","animation","tooltip","trigger","axisPointer","type","toolbox","show","grid","left","right","top","containLabel","brush","xAxisIndex","brushLink","outOfBrush","colorAlpha","brushStyle","color","borderColor","inBrunsh","xAxis","axisLine","lineStyle","width","axisLabel","textStyle","fontSize","data","scale","boundaryGap","axisTick","alignWithLabel","splitNumber","min","max","yAxis","splitLine","onZero","dataZoom","start","end","realtime","dataBackground","areaStyle","handleStyle","backgroundColor","fillerColor","series","name","yAxisIndex","itemStyle","normal","attached","showDatazoom","detached","clearInterval","_chartBrushInterval","dataChanged","timeArr","valueArr","forEach","obj","push","key","value","playTimeline","_startBrush","resetTimeline","echart","dispatchDatazoom","_brushChart","pauseTimeline","length","setInterval","dispatchEvent","CustomEvent","detail","bubbles","totalBrushTime","chart","getChart","dispatchAction","areas","brushType","coordRange","startObj","endObj","startIndex","endIndex","startItem","endItem","datazoom","params"],"mappings":"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","file":"tl-timeline.js","sourceRoot":"/src","sourcesContent":["import { inject, customElement, bindable } from 'aurelia-framework';\nimport _ from 'lodash';\nimport { moment } from 'pg/htmlkit'\n\n@customElement('tl-timeline')\n@inject(Element)\nexport class TlTimeLine {\n  @bindable data;\n  @bindable showDatazoom = true;\n  @bindable totalBrushTime = 2000;\n  loading = false;\n  element;\n\n  _attached = false;\n  _brushing = false;\n  _brushIndex = 0;\n  _chartBrushInterval;\n  _datazoomParams = {}; //cache the datazoom params\n\n  constructor(element) {\n    this.defaultView = true;\n    this.options = {\n      animation: false,\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'line'\n        }\n      },\n      toolbox: {\n        show: false\n      },\n      grid: {\n        left: 0,\n        right: 10,\n        top: 20,\n        containLabel: true\n      },\n      brush: {\n        xAxisIndex: 'all',\n        brushLink: 'all',\n        // brushType:'lineY',\n        outOfBrush: {\n          colorAlpha: 0.3\n        },\n        brushStyle: {\n          color: 'rgba(120,140,180,0.1)',\n          borderColor: 'rgba(120,140,180,0.3)',\n        },\n        inBrunsh: {\n          color: 'red',\n          colorAlpha: 1\n        }\n      },\n      xAxis: [\n        {\n          type: 'category',\n          axisLine: {\n            lineStyle: {\n              color: '#cdcdcd',\n              width: 1\n            }\n          },\n          axisLabel: {\n            show: true,\n            textStyle: {\n              color: '#000',\n              fontSize: 10\n            }\n          },\n          data: [],\n          scale: true,\n          boundaryGap: true,\n          axisTick: { alignWithLabel: true },\n          splitNumber: 20,\n          min: 'dataMin',\n          max: 'dataMax'\n        }\n        // ,{\n        //             type: 'category',\n        //             gridIndex: 1,\n        //             data: [],\n        //             scale: true,\n        //             boundaryGap : 24,\n        //             axisLine: {onZero: false},\n        //             axisTick: {show: false},\n        //             splitLine: {show: false},\n        //             axisLabel: {show: false},\n        //             splitNumber: 20,\n        //             min: 'dataMin',\n        //             max: 'dataMax'\n        //         }\n      ],\n      yAxis: [\n        {\n          scale: true,\n          splitLine: { show: false },\n          axisLine: {\n            onZero: true,\n            lineStyle: {\n              color: '#cdcdcd',\n              width: 1\n            }\n          },\n          axisLabel: {\n            textStyle: {\n              color: '#000',\n              fontSize: 10\n            }\n          }\n        }\n      ],\n      dataZoom: [\n        {\n          show: false,\n          xAxisIndex: [0],\n          type: 'slider',\n          top: '65%',\n          start: 0,\n          end: 100,\n          realtime: false,\n          dataBackground: {\n            lineStyle: {\n              color: 'rgba(89,200,211,1)'\n            },\n            areaStyle: {\n              color: 'rgba(89,200,211,0.5)'\n            }\n          },\n          handleStyle: {\n            color: '#FFFFFF',\n            borderColor: '#59c8d3'\n          },\n          backgroundColor: '#FFFFFF',\n          fillerColor: 'rgba(89,200,211,0.5)'\n        }\n      ],\n      series: [\n        {\n          name: 'Twitters',\n          type: 'bar',\n          xAxisIndex: 0,\n          yAxisIndex: 0,\n          itemStyle: {\n            normal: {\n              color: '#a6dfe6'\n            }\n          },\n          data: []\n        }\n      ]\n    };\n    this.element = element;\n  }\n\n  attached() {\n    this.options.dataZoom[0].show = this.showDatazoom;\n  }\n  detached() {\n    clearInterval(this._chartBrushInterval);\n  }\n\n  dataChanged() {\n    this.defaultView = false;\n    let timeArr = [], valueArr = []\n    this.data.forEach((obj) => { timeArr.push(obj.key); valueArr.push(obj.value); })\n    this.options.series[0].data = valueArr;\n    this.options.xAxis[0].data = timeArr;\n    // todo: add timeline xAxis label data\n  }\n\n  playTimeline() {\n    this._startBrush();\n  }\n\n  resetTimeline() {\n    this._brushIndex = 0;\n    this._brushing = false;\n    clearInterval(this._chartBrushInterval);\n    this.echart.dispatchDatazoom({ show: this.showDatazoom  });\n    this._brushChart(0, 0);\n  }\n\n  pauseTimeline() {\n    this._brushing = false;\n    clearInterval(this._chartBrushInterval);\n  }\n\n  _startBrush(start) {\n    if (!this._brushing && this.data && this.data.length) {\n      const length = this.data.length;\n      this._brushing = true;\n      this.echart.dispatchDatazoom({ show: false });\n      this._chartBrushInterval = setInterval(() => {\n        this._brushChart(0, this._brushIndex);\n        this._brushIndex++;\n        if (this._brushIndex > length) {\n          this._brushing = false;\n          this.echart.dispatchDatazoom({ show: this.showDatazoom });\n          this._brushChart(0, this._brushIndex - 1);\n          clearInterval(this._chartBrushInterval);\n          this._brushIndex = 0;\n\n          // dispatch when play is finished\n          this.element.dispatchEvent(new CustomEvent('play-done', {\n            detail: {},\n            bubbles: true\n          }));\n        }\n      }, this.totalBrushTime / this.data.length);\n\n    }\n  }\n\n  _brushChart(start, end) {\n    const chart = this.echart.getChart();\n    chart.dispatchAction({\n      type: 'brush',\n      areas: [{\n        brushType: 'lineX',\n        xAxisIndex: 0,\n        coordRange: [start - 1, end ? end : -1]\n      }]\n    });\n    let startObj = this.data[start];\n    let endObj = this.data[end];\n    //the brush stop at the center of the bar ,so the last will move more one just for view.\n    if (end < this.data.length) {\n      this.element.dispatchEvent(new CustomEvent('data-brush', {\n        detail: {\n          startIndex: start,\n          endIndex: end,\n          startItem: startObj,\n          endItem: endObj\n        },\n        bubbles: true\n      }));\n    }\n\n  }\n\n  datazoom(params) {\n    // let {rangeStart, rangeEnd} = params;\n    // if (this.data && this.data.length) {\n    //     rangeStart = rangeStart || 0;\n    //     rangeEnd = rangeEnd || this.data.length - 1;\n    // }\n    // this._datazoomParams = _.assignIn(this._datazoomParams, params, { rangeStart, rangeEnd });\n\n    this.element.dispatchEvent(\n      new CustomEvent('data-range-change', { detail: params, bubbles: true })\n    );\n  }\n}\n"]}