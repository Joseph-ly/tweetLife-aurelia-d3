{"version":3,"sources":["tweetlife/app.js"],"names":["App","EventAggregator","defaultView","emptyIcon","statusDataPlaceholder","retweets","reach","maxDepth","halfLife","percent80Life","topRetweetersDataPlaceholder","entity","name","spread","time","level","analyzeTweetlife","rootId","trim","rootTweetId","fetching","length","loading","addClass","eventAggregator","publish","retweeterList","setTimeout","server","createRequest","withParams","cache","asGet","send","then","data","JSON","parse","obj","response","code","errorCode","errorMsg","message","html","dataBack","removeClass","allData","rootTweetData","originTweet","tweetLifeEntityTree","statusData","tweetLifeStat","topRetweetersData","topRetweeterEntities","spreadTime","geoData","countryCodes","wordcloudData","bioKeywords","mostEngagedRetweeters","mostActiveRetweeters","mostFollowedRetweeters","mostInfluenceRetweeters","catch","console","log","error","deepCopyData","targetArr","resultArr","forEach","objNew","key","push","configure","cardPanelTitles","retweeterCardsNum","dropdownTitle","attached","changeRetweeterTab","$event","tabTitle","detail","changeListNum","number"],"mappings":"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","file":"app.js","sourceRoot":"/src","sourcesContent":["import $ from 'jquery';\nimport {inject} from 'aurelia-framework'\nimport {HttpClient} from 'aurelia-http-client';\nimport {EventAggregator} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class App {\n    defaultView = true;\n    emptyIcon = '-';\n    statusDataPlaceholder = [\n        {retweets: this.emptyIcon, reach: this.emptyIcon, maxDepth: this.emptyIcon, halfLife: this.emptyIcon, percent80Life: this.emptyIcon}\n    ];\n    topRetweetersDataPlaceholder = [\n        {entity: {name: this.emptyIcon}, spread: this.emptyIcon, reach: this.emptyIcon, time: this.emptyIcon, level: this.emptyIcon},\n        {entity: {name: this.emptyIcon}, spread: this.emptyIcon, reach: this.emptyIcon, time: this.emptyIcon, level: this.emptyIcon},\n        {entity: {name: this.emptyIcon}, spread: this.emptyIcon, reach: this.emptyIcon, time: this.emptyIcon, level: this.emptyIcon},\n        {entity: {name: this.emptyIcon}, spread: this.emptyIcon, reach: this.emptyIcon, time: this.emptyIcon, level: this.emptyIcon},\n        {entity: {name: this.emptyIcon}, spread: this.emptyIcon, reach: this.emptyIcon, time: this.emptyIcon, level: this.emptyIcon}\n    ]\n\n    constructor(EventAggregator) {\n        this.server = new HttpClient();\n        this.server.configure(config => {\n        //   config.useStandardConfiguration();//add cookie to request header\n        });\n        this.eventAggregator = EventAggregator;\n        this.dataBack = false;\n        this.fetching = false;\n        this.loading = false;\n\n        this.rootTweetId = '831527113211645959'\n        this.rootTweetData = {}\n        this.tweetLifeEntityTree = {};\n        this.statusData = this.deepCopyData(this.statusDataPlaceholder)\n        this.topRetweetersData = this.deepCopyData(this.topRetweetersDataPlaceholder)\n\n        this.cardPanelTitles = [\n            'Stats',\n            'Top Retweeters who caused largest spread',\n            'Cumulative Retweet Count vs Time',\n            'Geographic analysis of retweeters by top profile country',\n            'Word Cloud from Retweeters Bio'\n        ];\n\n        this.retweeterCardsNum = 5;\n        this.dropdownTitle = 'Top 5';\n        this.retweeterList = {\n            'Most engaging Retweeters': {\n                data:null,\n                defaultView:true,\n                loading:false\n            },\n            'Most active Retweeters': {\n                data: null,\n                defaultView:true,\n                loading:false\n            },\n            'Most followed Retweeters': {\n                data: null,\n                defaultView:true,\n                loading:false\n            },\n            'Most influential Retweeters': {\n                data: null,\n                defaultView:true,\n                loading:false\n            }\n        }\n\n    }\n\n    attached() {}\n\n    analyzeTweetlife = () => {\n        let rootId = $.trim(this.rootTweetId);\n        this.fetching = true;\n        if(rootId && rootId.length > 0) {\n            // loading\n            this.loading = true;\n            $('.actualRecord').addClass('hide');\n            this.eventAggregator.publish('triggerFetch');\n            this.defaultView = false;\n            this.retweeterList['Most engaging Retweeters'].defaultView = false;\n            this.retweeterList['Most active Retweeters'].defaultView = false;\n            this.retweeterList['Most followed Retweeters'].defaultView = false;\n            this.retweeterList['Most influential Retweeters'].defaultView = false;\n            this.retweeterList['Most engaging Retweeters'].loading = true;\n            this.retweeterList['Most active Retweeters'].loading = true;\n            this.retweeterList['Most followed Retweeters'].loading = true;\n            this.retweeterList['Most influential Retweeters'].loading = true;\n            setTimeout(() => {\n                this.server.createRequest('/api/os2-backend/tweetlife/' + rootId)\n                    .withParams({cache: false})\n                    .asGet()\n                    .send()\n                    // .then(response => {return response.json()})\n                    .then(obj => {\n                        this.fetching = false;\n                        // console.log(obj.response)\n                        // console.log(JSON.parse(obj.response))\n                        let data = JSON.parse(obj.response);\n                        if(data.code && data.code >= 400) {\n                            // this.dataBack = true;\n                            this.loading = false;\n                            let errorCode = data.code;\n                            let errorMsg = data.message;\n                            $('.fetchErrorMsg').html('Error : ' + errorCode + ', ' + errorMsg)\n                        }\n                        else {\n                            this.dataBack = true;\n                            this.loading = false;\n                            $('.actualRecord').removeClass('hide');\n                            this.allData = data;\n                            // set model for all the charts\n                            this.rootTweetData = data.originTweet;\n                            this.tweetLifeEntityTree = data.tweetLifeEntityTree;\n                            this.statusData = data.tweetLifeStat;\n                            this.topRetweetersData = data.topRetweeterEntities;\n                            this.spreadTime = data.spreadTime;\n                            this.geoData = data.countryCodes;\n                            this.wordcloudData = data.bioKeywords;\n                            // btm list\n                            this.mostEngagedRetweeters = data.mostEngagedRetweeters;\n                            this.mostActiveRetweeters = data.mostActiveRetweeters;\n                            this.mostFollowedRetweeters = data.mostFollowedRetweeters;\n                            this.mostInfluenceRetweeters = data.mostInfluenceRetweeters;\n\n                            this.retweeterList['Most engaging Retweeters'].data = this.mostEngagedRetweeters;\n                            this.retweeterList['Most active Retweeters'].data = this.mostActiveRetweeters;\n                            this.retweeterList['Most followed Retweeters'].data = this.mostFollowedRetweeters;\n                            this.retweeterList['Most influential Retweeters'].data = this.mostInfluenceRetweeters;\n\n                            this.retweeterList['Most engaging Retweeters'].loading = false;\n                            this.retweeterList['Most active Retweeters'].loading = false;\n                            this.retweeterList['Most followed Retweeters'].loading = false;\n                            this.retweeterList['Most influential Retweeters'].loading = false;\n\n                            this.eventAggregator.publish('tweetlifeData', data);\n                            this.defaultView = false;\n                        }\n                        \n                    })\n                    .catch(error => {\n                        // alert('api error')\n                        console.log(error)\n                        $('.fetchErrorMsg').html('error')\n                    }) \n            }, 1000)\n\n        }\n        else {\n            // reset all forms\n            this.dataBack = false;\n            this.loading = false;\n            this.statusData = this.deepCopyData(this.statusDataPlaceholder)\n            this.topRetweetersData = this.deepCopyData(this.topRetweetersDataPlaceholder)\n            this.eventAggregator.publish('noRootTweetId');\n            this.defaultView = true;\n        }\n        \n    }\n\n    changeRetweeterTab($event) {\n        let tabTitle = $event.detail;\n        // if(this.allData) this.eventAggregator.publish('tweetlifeData', this.allData);\n    }\n\n    deepCopyData = (targetArr) => {\n        let resultArr = [];\n        targetArr.forEach((obj) => {\n            let objNew = {};\n            for(let key in obj) {\n                objNew[key] = obj[key];\n            }\n            resultArr.push(objNew);\n        })\n        return resultArr;\n    }\n\n\n    changeListNum(number) {\n        this.retweeterCardsNum = number;\n        this.dropdownTitle = 'Top' + number;\n    }\n\n\n}\n"]}