{"version":3,"sources":["components/box-wrap/box-wrap.js"],"names":["BoxWrap","Element","getClassNames","classes","class","push","join","changeView","item","oldTab","activeTab","element","dispatchEvent","CustomEvent","detail","bubbles","attached","isShowSelection","list","listChanged"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGaA,O,WAAAA,O,WADZ,8BAAOC,OAAP,C;sBAQGC,a,4BAAgB;AACZ,YAAMC,UAAU,CAAC,UAAD,CAAhB;AACA,YAAI,KAAKC,KAAT,EAAgB;AACZD,oBAAQE,IAAR,CAAa,KAAKD,KAAlB;AACH;AACD,eAAOD,QAAQG,IAAR,CAAa,GAAb,CAAP;AACH,K;;sBAEDC,U,uBAAWC,I,EAAM;AACb,YAAMC,SAAS,KAAKC,SAApB;AACA,aAAKA,SAAL,GAAiBF,IAAjB;AACA,YAAIC,WAAWD,IAAf,EAAqB;AACjB,iBAAKG,OAAL,CAAaC,aAAb,CAA2B,IAAIC,WAAJ,CAAgB,iBAAhB,EAAmC;AAC1DC,wBAAQ;AACJJ,+BAAW,KAAKA;AADZ,iBADkD,EAGvDK,SAAS;AAH8C,aAAnC,CAA3B;AAMH;AAEJ,K;;AAED,qBAAYJ,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACjB,aAAKA,OAAL,GAAeA,OAAf;AACH;;sBAEDK,Q,uBAAW;AACP,aAAKN,SAAL,GAAiB,KAAKO,eAAL,GAAuB,KAAKC,IAAL,CAAU,CAAV,CAAvB,GAAsC,IAAvD;AACH,K;;sBACDC,W,0BAAc;AACV,YAAI,KAAKD,IAAT,EAAe;AACX,iBAAKR,SAAL,GAAiB,KAAKQ,IAAL,CAAU,CAAV,CAAjB;AACH;AACJ,K","file":"box-wrap.js","sourceRoot":"/src","sourcesContent":["import { inject, bindable, containerless } from 'aurelia-framework';\n\n@inject(Element)\nexport class BoxWrap {\n    @bindable class;\n    @bindable title;\n    @bindable list;\n    @bindable isShowSelection;\n    @bindable activeTab;\n\n    getClassNames() {\n        const classes = ['box-wrap'];\n        if (this.class) {\n            classes.push(this.class);\n        }\n        return classes.join(' ');\n    }\n\n    changeView(item) {\n        const oldTab = this.activeTab;\n        this.activeTab = item;\n        if (oldTab !== item) {\n            this.element.dispatchEvent(new CustomEvent('activetabchange', {\n                detail: {\n                    activeTab: this.activeTab\n                }, bubbles: true\n            })\n            );\n        }\n\n    }\n\n    constructor(element) {\n        this.element = element;\n    }\n\n    attached() {\n        this.activeTab = this.isShowSelection ? this.list[0] : null;\n    }\n    listChanged() {\n        if (this.list) {\n            this.activeTab = this.list[0];\n        }\n    }\n}\n"]}