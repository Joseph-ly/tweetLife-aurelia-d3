"use strict";
const rule_1 = require("../rule");
const issue_1 = require("../issue");
class ValidChildRule extends rule_1.Rule {
    constructor(rules) {
        super();
        this.rules = rules;
    }
    init(parser) {
        if (!this.rules)
            return;
        parser.on('startTag', (name, attrs, selfClosing, loc) => {
            if (parser.state.stack.length <= 1)
                return;
            var stack = parser.state.stack;
            var parent = stack[stack.length - 1];
            var rule = this.rules.find(x => x.element == parent.name);
            if (!rule)
                return;
            if (rule.exclude) {
                if (rule.exclude.findIndex(x => x == name) != -1) {
                    this.reportIssue(new issue_1.Issue({
                        message: `<${name}> as child of <${rule.element}> is not allowed`,
                        severity: issue_1.IssueSeverity.Error,
                        line: loc.line,
                        column: loc.col,
                        start: loc.startOffset,
                        end: loc.endOffset
                    }));
                }
            }
            else if (rule.allow) {
                if (rule.allow.findIndex(x => x == name) == -1) {
                    this.reportIssue(new issue_1.Issue({
                        message: `<${name}> as child of <${rule.element}> is not allowed`,
                        severity: issue_1.IssueSeverity.Error,
                        line: loc.line,
                        column: loc.col,
                        start: loc.startOffset,
                        end: loc.endOffset
                    }));
                }
            }
        });
    }
}
exports.ValidChildRule = ValidChildRule;

//# sourceMappingURL=valid-child.js.map
