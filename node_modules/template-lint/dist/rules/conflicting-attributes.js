"use strict";
const rule_1 = require("../rule");
const issue_1 = require("../issue");
class ConflictingAttributes {
    constructor(attrs, msg) {
        this.attrs = attrs;
        this.msg = msg;
    }
}
exports.ConflictingAttributes = ConflictingAttributes;
/**
 * Rule to ensure tags don't have attributes that shouldn't be used at the same time.
 */
class ConflictingAttributesRule extends rule_1.Rule {
    constructor(conflictingAttributesList) {
        super();
        this.conflictingAttributesList = conflictingAttributesList;
        if (!conflictingAttributesList) {
            this.conflictingAttributesList = [];
        }
        else if (conflictingAttributesList.length === 0) {
            throw new Error("Illegal argument: empty conflictingAttributesList");
        }
    }
    init(parser) {
        if (this.conflictingAttributesList.length === 0)
            return;
        parser.on("startTag", (tag, attrs, selfClosing, loc) => {
            this.conflictingAttributesList.forEach((conflictingAttributes) => {
                this.checkConflictsWith(attrs, loc, conflictingAttributes);
            });
        });
    }
    checkConflictsWith(attrs, loc, conflictingAttributes) {
        const attributes = [];
        attrs.forEach(attr => {
            if (conflictingAttributes.attrs.indexOf(attr.name) >= 0) {
                attributes.push(attr.name);
            }
        });
        if (attributes.length > 1) {
            const fullErrMsg = ConflictingAttributesRule.ERRMSG_PREFIX + "[" + attributes.join(", ") + "]";
            this.reportIssue(new issue_1.Issue({
                message: fullErrMsg,
                line: loc.line,
                column: loc.col,
                detail: conflictingAttributes.msg,
                start: loc.startOffset,
                end: loc.endOffset
            }));
        }
    }
}
ConflictingAttributesRule.ERRMSG_PREFIX = "conflicting attributes: ";
exports.ConflictingAttributesRule = ConflictingAttributesRule;

//# sourceMappingURL=conflicting-attributes.js.map
