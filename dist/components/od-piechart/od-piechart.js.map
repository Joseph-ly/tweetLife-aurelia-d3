{"version":3,"sources":["components/od-piechart/od-piechart.js"],"names":["OdPieChart","EventAggregator","loading","options","tooltip","trigger","formatter","legend","orient","left","top","align","itemGap","itemWidth","itemHeight","data","series","name","type","radius","center","label","normal","show","position","emphasis","labelLine","itemStyle","shadowBlur","shadowOffsetX","shadowColor","color","eventAggregator","subscribe","geoData","countryCodes","length","slice","generateData","result","countryNames","attached","countryNamesArr","map","datum","countryObj","find","country","cca2","key","toUpperCase","countryName","push","common","value"],"mappings":"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","file":"od-piechart.js","sourceRoot":"/src","sourcesContent":["import { inject, customElement, bindable } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport countries from './countries';\nimport _ from 'lodash';\n\n@customElement('od-piechart')\n@inject(EventAggregator)\nexport class OdPieChart {\n    @bindable data;\n    @bindable defaultView;\n    loading = false;\n\n    constructor(EventAggregator) {\n        // piechart config options\n        this.options = {\n            tooltip: {\n                trigger: 'item',\n                formatter: \"{b} : {c} ({d}%)\"\n            },\n            legend: {\n                orient: 'vertical',\n                left: '70%',\n                top: 'center',\n                align:'left',\n                itemGap: 5,\n                itemWidth: 20,\n                itemHeight: 20,\n                data: []\n            },\n            series: [\n                {\n                    name: 'Retweeters',\n                    type: 'pie',\n                    radius: ['0','80%'],\n                    center: ['35%', '50%'],\n                    data: [],\n                    label: {\n                        normal: {\n                            show: false,\n                            position: 'inner'\n                        },\n                        emphasis: {\n                            show: false ,\n                            // textStyle: {\n                            //     fontSize: '30',\n                            //     fontWeight: 'bold'\n                            // }\n                        }\n                    },\n                    labelLine: {\n                        normal: {\n                            show: false\n                        }\n                    },\n                    itemStyle: {\n                        emphasis: {\n                            shadowBlur: 10,\n                            shadowOffsetX: 0,\n                            shadowColor: 'rgba(0, 0, 0, 0.5)'\n                        }\n                    }\n                }\n            ],\n            color:['#69a5b6','#61b8c6','#5ccad2', '#6dd1c8','#7dd8bf','#95e1bb', '#afe9b6','#c7f1b3','#dff9af', '#f3ffac']\n        };\n        \n        this.eventAggregator = EventAggregator;\n        this.eventAggregator.subscribe('triggerFetch', () => {\n \n            this.loading = true;\n        })\n        this.eventAggregator.subscribe('tweetlifeData', (data) => {\n            this.loading = false;\n            this.geoData = data.countryCodes;\n            // control data number\n            if(this.geoData && (this.geoData.length > 10) ) {\n                this.geoData = this.geoData.slice(0, 10);\n            }\n            let [result, countryNames] = this.generateData(this.geoData);\n            this.options.legend.data = countryNames\n            this.options.series[0].data = result;\n            this.data = result;\n        })\n        this.eventAggregator.subscribe('noRootTweetId', () => {\n\n            this.loading = false;\n        })\n        \n    }\n\n    attached() {}\n\n    generateData(data) {\n        let result = [];\n        let countryNamesArr = [];\n\n        result = _.map(data, (datum) => {\n            let countryObj = _.find(countries, function(country) {\n                return country.cca2 == datum.key.toUpperCase() || country['cca3'] == datum.key.toUpperCase();\n            });\n            let countryName = '';\n            if(datum.key == 'unknown') {\n                countryNamesArr.push('unknown');\n                countryName = 'unknown'\n            }\n            else {\n                countryNamesArr.push(countryObj.name.common || datum.key);\n                countryName = countryObj.name.common || datum.key;\n            }\n            \n            return { name: countryName, value: datum.value }\n        });\n\n        return [result, countryNamesArr];\n    };\n\n}\n"]}